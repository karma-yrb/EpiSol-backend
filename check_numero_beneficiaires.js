// Script pour v√©rifier les num√©ros de b√©n√©ficiaires avant migration
require('dotenv').config();
const mysql = require('mysql');

const db = mysql.createConnection({
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'episol',
  port: process.env.DB_PORT || 3306
});

db.connect((err) => {
  if (err) {
    console.error('‚ùå Erreur de connexion √† la base de donn√©es:', err);
    return;
  }
  console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie\n');
});

console.log('üîç V√©rification des num√©ros de b√©n√©ficiaires...\n');

// V√©rifier les num√©ros probl√©matiques
db.query(`
  SELECT numero, LENGTH(numero) as longueur 
  FROM beneficiaires 
  WHERE LENGTH(numero) > 5 OR numero NOT REGEXP '^[0-9]+$'
`, (err, problematicResults) => {
  if (err) {
    console.error('‚ùå Erreur lors de la v√©rification:', err);
    return;
  }
  
  console.log('üìä Num√©ros probl√©matiques (plus de 5 chiffres ou contenant des caract√®res non num√©riques):');
  if (problematicResults.length === 0) {
    console.log('‚úÖ Aucun num√©ro probl√©matique trouv√©');
  } else {
    console.table(problematicResults);
  }
  
  // V√©rifier tous les num√©ros
  db.query(`
    SELECT numero, LENGTH(numero) as longueur 
    FROM beneficiaires 
    ORDER BY LENGTH(numero) DESC, numero
  `, (err, allResults) => {
    if (err) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration:', err);
      return;
    }
    
    console.log('\nüìã Tous les num√©ros (tri√©s par longueur d√©croissante):');
    console.table(allResults);
    
    // Statistiques
    const longueurs = allResults.map(r => r.longueur);
    const maxLength = Math.max(...longueurs);
    const minLength = Math.min(...longueurs);
    const avgLength = (longueurs.reduce((a, b) => a + b, 0) / longueurs.length).toFixed(2);
    
    console.log('\nüìà Statistiques:');
    console.log(`   Longueur maximum: ${maxLength}`);
    console.log(`   Longueur minimum: ${minLength}`);
    console.log(`   Longueur moyenne: ${avgLength}`);
    console.log(`   Total b√©n√©ficiaires: ${allResults.length}`);
    
    // Compter par longueur
    const countByLength = {};
    longueurs.forEach(l => {
      countByLength[l] = (countByLength[l] || 0) + 1;
    });
    
    console.log('\nüìä R√©partition par longueur:');
    Object.keys(countByLength).sort().forEach(length => {
      console.log(`   ${length} chiffres: ${countByLength[length]} b√©n√©ficiaires`);
    });
    
    db.end();
  });
});
